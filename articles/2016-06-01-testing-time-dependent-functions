<p>Recently I started a weekend project called <a href="http://todolist.site" rel="nofollow">Todolist</a>, which is a little Go application for the command line that does simple task management.  Todolist is centered around due dates,  and I needed a good way to unit test my code.  So the question was, how do I test functions with dates in Go?</p>

<p>Well, in Ruby the answer is simple.  You either grab <a href="https://github.com/travisjeffery/timecop" rel="nofollow">Timecop</a> or drag in <a href="http://api.rubyonrails.org/classes/ActiveSupport/Testing/TimeHelpers.html" rel="nofollow">ActiveSupport&rsquo;s TimeHelpers</a> and use <code>travel_to</code> to mock up the date you need to be at.</p>

<p>But you have to ask yourself, is this the best way to test time-dependent code?  By mocking a global variable?</p>

<p>Consider the following (very contrived) function:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">WeekLibrary</span>
  <span class="k">def</span> <span class="nf">is_weekday?</span>
    <span class="o">!</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">].</span><span class="nf">include?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">wday</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
<p>The above function, while easy to reason about, is actually very hard to test.  If I were to test this I&rsquo;d probably do something like this:</p>
<pre class="highlight ruby"><code><span class="nb">require</span> <span class="s2">"minitest/autorun"</span>
<span class="nb">require</span> <span class="s2">"timecop"</span>

<span class="k">class</span> <span class="nc">TestWeekLibrary</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_is_weekday_when_weekday</span>
    <span class="n">monday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">wednesday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">friday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>

    <span class="p">[</span><span class="n">monday</span><span class="p">,</span> <span class="n">wednesday</span><span class="p">,</span> <span class="n">friday</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">day</span><span class="o">|</span>
      <span class="no">Timecop</span><span class="p">.</span><span class="nf">freeze</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">assert_equal</span> <span class="kp">true</span><span class="p">,</span> <span class="no">WeekLibrary</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">is_weekday?</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_is_weekday_when_not_weekday</span>
    <span class="n">saturday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">sunday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>

    <span class="p">[</span><span class="n">saturday</span><span class="p">,</span> <span class="n">sunday</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">day</span><span class="o">|</span>
      <span class="no">Timecop</span><span class="p">.</span><span class="nf">freeze</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">assert_equal</span> <span class="kp">false</span><span class="p">,</span> <span class="no">WeekLibrary</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">is_weekday?</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
<p>The main issue here is that I must mock the <code>Time</code> and <code>Date</code> classes in order to test my function.  The reason is because my function is fully dependent on today&rsquo;s date.   It is a hard dependency on a global state (in this case <code>Date.today</code>).  The output of my function will change based upon the day I run my test!  So I <em>must</em> mock <code>Date.today</code>.  Right?  Right!?</p>

<p>Well, maybe not!  If we treat today&rsquo;s date as a <em>dependency</em> then we can always <em>reverse</em> that dependency with good ol&rsquo; <a href="http://martinfowler.com/articles/dipInTheWild.html" rel="nofollow">dependency injection</a>.  In this case, if we <em>inject</em> the date rather than depending on it, then the function instantly becomes much more testable:</p>
<pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">WeekLibrary</span>
  <span class="k">def</span> <span class="nf">is_weekday?</span><span class="p">(</span><span class="n">day</span> <span class="o">=</span> <span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">)</span>
    <span class="o">!</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">].</span><span class="nf">include?</span><span class="p">(</span><span class="n">day</span><span class="p">.</span><span class="nf">wday</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
<p>Well huh, so the default here is still today&rsquo;s date, which is great for the usability of my class&rsquo;s API. But I can also <em>inject</em> a specific date, which is great for testing purposes. This completely eliminates the need for Timecop, <code>travel_to</code>, or what have you.</p>

<p>Another positive side effect is that my function is now much more generic.  Now, <code>is_weekday</code> will tell me if <em>any</em> date is a weekday, rather than <em>today&rsquo;s</em> date.  It has much more utility.</p>

<p>The tests are also much simpler. We have no need for a monkeypatching time library or any time traveling boilerplate:</p>
<pre class="highlight ruby"><code><span class="nb">require</span> <span class="s2">"minitest/autorun"</span>

<span class="k">class</span> <span class="nc">TestWeekLibrary</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
  <span class="k">def</span> <span class="nf">test_is_weekday_when_weekday</span>
    <span class="n">monday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">wednesday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">friday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>

    <span class="p">[</span><span class="n">monday</span><span class="p">,</span> <span class="n">wednesday</span><span class="p">,</span> <span class="n">friday</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">day</span><span class="o">|</span>
      <span class="n">assert_equal</span> <span class="kp">true</span><span class="p">,</span> <span class="no">WeekLibrary</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">is_weekday?</span><span class="p">(</span><span class="n">day</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">test_is_weekday_when_not_weekday</span>
    <span class="n">saturday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">sunday</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">local</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>

    <span class="n">assert_equal</span> <span class="kp">false</span><span class="p">,</span> <span class="no">WeekLibrary</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">is_weekday?</span><span class="p">(</span><span class="n">saturday</span><span class="p">)</span>
    <span class="n">assert_equal</span> <span class="kp">false</span><span class="p">,</span> <span class="no">WeekLibrary</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">is_weekday?</span><span class="p">(</span><span class="n">sunday</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre>
<p>So what&rsquo;s the TLDR?</p>

<p><strong>1. Functions that require comparisons to today&rsquo;s date are <em>dependent</em> on time.</strong></p>

<p>Today is variable.  As I write this, today is Wednesday.  But tomorrow, today will be Thursday!  The simple fact that time (purportedly) moves forward makes a function&rsquo;s output <em>variable</em> based upon when it is run.  This makes the function&rsquo;s <a href="http://googletesting.blogspot.com/2008/08/by-miko-hevery-so-you-decided-to.html" rel="nofollow">testability</a> very difficult, and introduces a reliance on a global state.</p>

<p>While using libraries to fix the output of <code>Date.today</code> is handy, it&rsquo;s not the best solution.</p>

<p><strong>2. Use dependency injection to inject the comparison date rather than relying on today&rsquo;s date.</strong></p>

<p>If you find yourself relying on a time class in your function and are about to reach for a time mocking library like <code>travel_to</code>, try injecting the date into the function first.  There&rsquo;s a good chance your problem will be solved right there!</p>
